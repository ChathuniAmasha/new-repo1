name: Deploy to ECS

on:
  push:
    branches: [ main ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-north-1
      ECR_REPOSITORY: my-app-repo
      ECS_CLUSTER: trustworthy-crocodile-5i3nq8 
      ECS_SERVICE: my_app_task1-service-ct9nmno5
      ECS_TASK_DEFINITION: .aws/my_app_task1-revision1.json
      CONTAINER_NAME: app1
      IMAGE_TAG: ${{ github.sha }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build and push Docker image
      id: build-image
      run: |
        ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        IMAGE_URI=$ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
        docker build -t $IMAGE_URI .
        docker push $IMAGE_URI
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

    - name: Render new ECS task definition with updated image
      id: render-task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ env.IMAGE_URI }}

    - name: Deploy new task definition to ECS service
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        task-definition: ${{ steps.render-task-def.outputs.task-definition }}
        wait-for-service-stability: true
